// Code generated by MockGen. DO NOT EDIT.
// Source: internal/movie/controller/controller.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	controller "github.com/backendgolang/searchapp/internal/movie/controller"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockController is a mock of Controller interface
type MockController struct {
	ctrl     *gomock.Controller
	recorder *MockControllerMockRecorder
}

// MockControllerMockRecorder is the mock recorder for MockController
type MockControllerMockRecorder struct {
	mock *MockController
}

// NewMockController creates a new mock instance
func NewMockController(ctrl *gomock.Controller) *MockController {
	mock := &MockController{ctrl: ctrl}
	mock.recorder = &MockControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockController) EXPECT() *MockControllerMockRecorder {
	return m.recorder
}

// GetByTitle mocks base method
func (m *MockController) GetByTitle(title string, page int64) (controller.MovieResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTitle", title, page)
	ret0, _ := ret[0].(controller.MovieResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTitle indicates an expected call of GetByTitle
func (mr *MockControllerMockRecorder) GetByTitle(title, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTitle", reflect.TypeOf((*MockController)(nil).GetByTitle), title, page)
}
